<?php
namespace AppBundle\FormType;
use AppBundle\Entity\BcsBrand;
use AppBundle\Entity\BcsItem;
use AppBundle\Entity\BcsMovement;
use AppBundle\Entity\BcsOrder;
use AppBundle\Entity\BcsSupplier;
use AppBundle\Entity\BcsTypeMovement;
use AppBundle\Repository\BcsOrderRepository;
use Doctrine\ORM\EntityRepository;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\CollectionType;
use Symfony\Component\Form\Extension\Core\Type\DateType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormEvents;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Translation\TranslatorInterface;
use Symfony\Component\Validator\Constraints\Valid;

/**
 * Created by PhpStorm.
 * User: Zo
 * Date: 20/04/2018
 * Time: 09:23
 */
class BcsMovementType extends AbstractType
{
	/**
	 * @var TranslatorInterface
	 */
	protected $g_trTranslator;

	public function buildForm(FormBuilderInterface $builder, array $options)
	{
		parent::buildForm($builder, $options); // TODO: Change the autogenerated stub

		$builder
			->add("mvtDate", DateType::class, [
                'widget' => 'single_text',
                'format' => 'yyyy-MM-dd',
                'attr' => ['class' => 'txt-date'],
                'html5' => false,
                'translation_domain'=>'translations'
            ])
			->add("mvtComment", TextareaType::class, [
			    'required' => false,
                'translation_domain'=>'translations'
            ])
            ->add("mvtMovementType", EntityType::class, [
                "class" => BcsTypeMovement::class,
                "choice_label" => "tpmDescription",
                "choice_value" => "id",
                'attr' => ['required'=> true,'class' => 'sel-type-movement'],
                'placeholder' => 'form.choose_type_movement',
                'required' => true,
                'translation_domain' => 'translations'
            ])
            ->add('mvtIsDraft', CheckboxType::class, array(
                'label'    => 'form.draft_label_checkbox',
                'required' => false,
                'attr' => ['checked' => true],
                'translation_domain' => 'translations'
            ))
            ->add('mvtMovementDetailLists', CollectionType::class, array(
                    'entry_type' => BcsMovementDetailType::class,
                    'prototype' => true,
                    'entry_options' => array('label' => false),
                    'allow_add' => true,
                    'allow_delete' => true,
                    'constraints' => new Valid(),
                    'by_reference' => false,
                    'translation_domain'=>'translations'
                )
            )
			;
//        $l_fmFormModifier = function (FormInterface $p_fiFormInterface, BcsTypeMovement $p_tmTypeMovement = null, BcsOrder $p_ordOrder = null){
//            if ( !is_null($p_tmTypeMovement) && $p_tmTypeMovement->getTpmCode() == "TMV0608-000002" )  {
//                $p_fiFormInterface->add('mvtOrder', EntityType::class, [
//                    "class" => BcsOrder::class,
//                    "choice_label" => "ordCode",
//                    "choice_value" => "id",
//                    'attr' => ['required'=> false,'class' => 'sel-order-to-deliver'],
//                    'placeholder' => 'form.choose_an_order',
//                    'required' => false,
//                    'query_builder' => function(BcsOrderRepository $p_orOrderRepository){
//                        return $p_orOrderRepository->getQueryOrderInProgress();
//                    },
//                    'translation_domain'=>'translations'
//                ]);
//            }
//            else {
//                $p_fiFormInterface->add('mvtOrder', EntityType::class, [
//                    "class" => BcsOrder::class,
//                    "choice_label" => "ordCode",
//                    "choice_value" => "id",
//                    'attr' => ['required'=> false,'class' => 'sel-order-to-deliver'],
//                    'placeholder' => 'form.no_order_to_choose',
//                    'required' => false,
//                    'choices' => array(),
//                    'translation_domain' => 'translations'
//                ]);
//            }
//        };
//
//		$builder->addEventListener(
//		    FormEvents::PRE_SET_DATA,
//            function (FormEvent $p_fevFormEvent) use ($l_fmFormModifier) {
//		        $l_dtData = $p_fevFormEvent->getData();
//		        $l_fmFormModifier($p_fevFormEvent->getForm(), $l_dtData->getMvtMovementType());
//            }
//        );
//
//		$builder->get('mvtMovementType')->addEventListener(
//		    FormEvents::POST_SUBMIT,
//            function (FormEvent $p_fevFormEvent) use ($l_fmFormModifier) {
//		        $l_tmTypeMovement = $p_fevFormEvent->getForm()->getData();
//		        $l_fmFormModifier($p_fevFormEvent->getForm()->getParent(), $l_tmTypeMovement);
//            }
//        );

	}

	public function configureOptions(OptionsResolver $resolver)
	{
		parent::configureOptions($resolver); // TODO: Change the autogenerated stub
		$resolver->setDefaults(
			array(
				'data_class' => BcsMovement::class,
				'csrf_protection' => true,
				'allow_extra_fields' => true,
				'csrf_field_name' => '_token',
				'translation_domain' => 'translations',
				// a unique key to help generate the secret token
				'csrf_token_id'   => 'task_item',
			)
		);
	}
}