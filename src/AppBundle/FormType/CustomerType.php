<?php
namespace AppBundle\FormType;

use AppBundle\Entity\BcsUser;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Form\Extension\Core\Type\RepeatedType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Translation\TranslatorInterface;

/**
 * Created by PhpStorm.
 * User: Zo
 * Date: 20/04/2018
 * Time: 09:23
 */
class CustomerType extends AbstractType
{
	/**
	 * @var TranslatorInterface
	 */
	protected $g_trTranslator;

	public function buildForm(FormBuilderInterface $builder, array $options)
	{
		parent::buildForm($builder, $options); // TODO: Change the autogenerated stub
		$this->g_trTranslator = $options['p_tiTranslatorInterface'];

		$builder
			->add("usrLastName")
			->add("usrFirstName")
			->add('usrGender', ChoiceType::class, array(
				                 'choices' => array(
					                 'form.male' => '1',
					                 'form.female' => '0'
				                 ),
				                 'choice_translation_domain' => true,
				                 'translation_domain' => 'translations'
			                 )
			)
			->add("usrAddress", TextareaType::class)
			->add('usrMail', EmailType::class)
			->add('password', RepeatedType::class, array(
				'type' => PasswordType::class,
				'invalid_message' => 'message.password_not_match',
				'required' => true
				)
			)
			->add('usrPhone')
			;

	}

	public function configureOptions(OptionsResolver $resolver)
	{
		parent::configureOptions($resolver); // TODO: Change the autogenerated stub
		$resolver->setDefaults(
			array(
				'data_class' => BcsUser::class,
				'csrf_protection' => true,
				'allow_extra_fields' => true,
				'csrf_field_name' => '_token',
				// a unique key to help generate the secret token
				'csrf_token_id'   => 'task_item',
			)
		);
		$resolver->setRequired('p_tiTranslatorInterface');
	}
}