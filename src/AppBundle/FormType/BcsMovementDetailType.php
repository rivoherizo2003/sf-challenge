<?php
namespace AppBundle\FormType;
use AppBundle\Entity\BcsBrand;
use AppBundle\Entity\BcsItem;
use AppBundle\Entity\BcsMovementDetail;
use AppBundle\Entity\BcsSupplier;
use AppBundle\Entity\BcsUnitOfMeasure;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\CollectionType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormEvents;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Translation\TranslatorInterface;

/**
 * Created by PhpStorm.
 * User: Zo
 * Date: 20/04/2018
 * Time: 09:23
 */
class BcsMovementDetailType extends AbstractType
{
	/**
	 * @var TranslatorInterface
	 */
	protected $g_trTranslator;

	public function buildForm(FormBuilderInterface $builder, array $options)
	{
		parent::buildForm($builder, $options); // TODO: Change the autogenerated stub

		$builder
			->add("mvdItem", EntityType::class, [
                "class" => BcsItem::class,
                "choice_label" => function(BcsItem $p_itItem){
			        return $p_itItem->getItmTitle(). " " . $p_itItem->getItmDescription();
                },
                'attr' => ['class' => 'sel-product'],
                "choice_value" => "id",
                'choice_attr' => function(BcsItem $p_itItem){
                    return ['data-stock-quantity' => $p_itItem->getItmStockQuantity(),
                        'data-unit-measure' => $p_itItem->getItmUnitOfMeasure()->getId()];
                },
                'translation_domain'=>'translations',
                'placeholder' => 'form.choose_a_product'
            ])
            ->add('mvdQuantity', TextType::class, [
                'attr' => [ 'class' => 'text-right', 'min' => '1'],
                'translation_domain'=>'translations'
            ])
            ->add('mvdStockQuantity', TextType::class, [
                'attr' => ['readonly' => true, 'class' => 'txt-stock-quantity text-right'],
                'translation_domain'=>'translations'
            ])
            ->add('mvdUnitOfMeasure', EntityType::class, [
                'class' => BcsUnitOfMeasure::class,
                'translation_domain'=>'translations',
                "choice_label" => function(BcsUnitOfMeasure $p_uomUnitOfMeasure){
                    return $p_uomUnitOfMeasure->getUomDescription();
                },
                'attr' => ['class' => 'sel-unit-of-measure'],
                "choice_value" => "id",
            ])
			;
	}

	public function configureOptions(OptionsResolver $resolver)
	{
		parent::configureOptions($resolver); // TODO: Change the autogenerated stub
		$resolver->setDefaults(
			array(
				'data_class' => BcsMovementDetail::class,
				'csrf_protection' => true,
				'allow_extra_fields' => true,
				'csrf_field_name' => '_token',
				'translation_domain' => 'translations',
				// a unique key to help generate the secret token
				'csrf_token_id'   => 'task_item',
			)
		);
	}
}